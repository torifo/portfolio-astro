---
// ThemeToggle.astro - テーマ切り替えと時間表示コンポーネント
---

<div class="theme-menu flex items-center space-x-4">
  <!-- 現在時刻表示 -->
  <div class="current-time text-cyan-400 font-mono text-sm"></div>
  
  <!-- 日の出・日没時間表示 -->
  <div class="sun-times text-xs text-gray-400 space-y-1">
    <div id="sunriseTime">Sunrise: --:--</div>
    <div id="sunsetTime">Sunset: --:--</div>
  </div>
  
  <!-- テーマ切り替えボタン -->
  <div class="relative">
    <button id="themeToggleBtn" class="p-2 rounded-lg glass hover:bg-white/10 transition-all duration-300" title="テーマ切り替え">
      <!-- 太陽アイコン（ライトモード用） -->
      <svg id="sunIcon" class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
      </svg>
      <!-- 月アイコン（ダークモード用） -->
      <svg id="moonIcon" class="w-5 h-5 text-blue-300 hidden" fill="currentColor" viewBox="0 0 20 20">
        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
      </svg>
    </button>
    
    <!-- テーマドロップダウンメニュー -->
    <div class="theme-dropdown absolute right-0 top-full mt-2 w-48 glass rounded-lg shadow-lg hidden z-50">
      <button data-theme="light" class="w-full px-4 py-2 text-left text-gray-300 hover:text-cyan-400 hover:bg-white/10 rounded-t-lg transition-colors">
        ☀️ ライトモード
      </button>
      <button data-theme="dark" class="w-full px-4 py-2 text-left text-gray-300 hover:text-cyan-400 hover:bg-white/10 transition-colors">
        🌙 ダークモード
      </button>
      <button data-theme="auto" class="w-full px-4 py-2 text-left text-gray-300 hover:text-cyan-400 hover:bg-white/10 rounded-b-lg transition-colors">
        🌅 自動（日没に合わせる）
      </button>
    </div>
  </div>
</div>

<script>
  // 日の出・日没API設定
  const LATITUDE = 35.6762; // 東京の緯度
  const LONGITUDE = 139.6503; // 東京の経度
  
  // 時刻のフォーマット関数
  function formatTime(date: Date): string {
    return date.toLocaleTimeString('ja-JP', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Asia/Tokyo'
    });
  }
  
  // 現在時刻を更新する関数
  function updateCurrentTime(): void {
    const now = new Date();
    const timeElement = document.querySelector('.current-time');
    if (timeElement) {
      timeElement.textContent = now.toLocaleTimeString('ja-JP', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZone: 'Asia/Tokyo'
      });
    }
  }
  
  // テーマ切り替え&日の出日没時間表示関数
  async function setThemeBasedOnSunriseSunset(): Promise<void> {
    try {
      const response = await fetch(`https://api.sunrise-sunset.org/json?lat=${LATITUDE}&lng=${LONGITUDE}&formatted=0`);
      
      if (!response.ok) {
        throw new Error(`APIリクエストに失敗しました: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'OK') {
        throw new Error('APIからデータを取得できませんでした');
      }
      
      // 日の出・日没時間を取得 (UTC)
      const sunriseUTC = new Date(data.results.sunrise);
      const sunsetUTC = new Date(data.results.sunset);
      
      // 現在時刻（UTC）で統一して比較
      const nowUTC = new Date();
      
      // formatTime関数は既にJSTに変換してくれるので、そのまま使用
      const sunriseTime = formatTime(sunriseUTC);
      const sunsetTime = formatTime(sunsetUTC);
      
      // 日の出・日没時間を表示（正しい順序で）
      const sunriseElement = document.getElementById('sunriseTime');
      const sunsetElement = document.getElementById('sunsetTime');
      
      if (sunriseElement) sunriseElement.textContent = `Sunrise: ${sunriseTime}`;
      if (sunsetElement) sunsetElement.textContent = `Sunset: ${sunsetTime}`;
      
      // テーマ切り替えロジック（UTCで統一して比較）
      // 日の出後から日没前の場合：ライトモード
      // 日没後または日の出前の場合：ナイトモード
      if (nowUTC >= sunriseUTC && nowUTC <= sunsetUTC) {
        document.body.classList.add('light-mode');
        document.body.classList.remove('night-mode');
        console.log('ライトモードに切り替え:', {
          now: nowUTC.toISOString(),
          sunrise: sunriseUTC.toISOString(),
          sunset: sunsetUTC.toISOString()
        });
      } else {
        document.body.classList.add('night-mode');
        document.body.classList.remove('light-mode');
        console.log('ナイトモードに切り替え:', {
          now: nowUTC.toISOString(),
          sunrise: sunriseUTC.toISOString(),
          sunset: sunsetUTC.toISOString()
        });
      }
      
      // アイコンを更新
      updateThemeIcon();
      
    } catch (error) {
      console.error('日の出・日没時間の取得エラー:', error);
      
      // エラー時のデフォルト動作
      const defaultSunsetHour = 18;
      const now = new Date().getHours();
      
      document.body.classList.toggle('night-mode', now >= defaultSunsetHour);
      document.body.classList.toggle('light-mode', now < defaultSunsetHour);
      
      // アイコンを更新
      updateThemeIcon();
      
      const sunriseElement = document.getElementById('sunriseTime');
      const sunsetElement = document.getElementById('sunsetTime');
      
      if (sunriseElement) sunriseElement.textContent = 'Sunrise: 未取得';
      if (sunsetElement) sunsetElement.textContent = 'Sunset: 未取得';
    }
  }
  
  // アイコンを更新する関数
  function updateThemeIcon(): void {
    const sunIcon = document.getElementById('sunIcon');
    const moonIcon = document.getElementById('moonIcon');
    
    if (sunIcon && moonIcon) {
      if (document.body.classList.contains('night-mode')) {
        sunIcon.classList.add('hidden');
        moonIcon.classList.remove('hidden');
      } else {
        sunIcon.classList.remove('hidden');
        moonIcon.classList.add('hidden');
      }
    }
  }
  
  // テーマドロップダウンメニューの制御
  const themeToggleBtn = document.getElementById('themeToggleBtn');
  const themeDropdown = document.querySelector('.theme-dropdown');
  
  if (themeToggleBtn && themeDropdown) {
    themeToggleBtn.addEventListener('click', () => {
      themeDropdown.classList.toggle('hidden');
    });
    
    // 外部クリックでメニューを閉じる
    document.addEventListener('click', (e) => {
      if (!themeToggleBtn.contains(e.target as Node) && !themeDropdown.contains(e.target as Node)) {
        themeDropdown.classList.add('hidden');
      }
    });
  }
  
  // ドロップダウンメニューでテーマ選択
  document.querySelectorAll('.theme-dropdown button').forEach(button => {
    button.addEventListener('click', (event) => {
      const selectedTheme = (event.currentTarget as HTMLButtonElement).getAttribute('data-theme');
      
      if (selectedTheme === 'light') {
        document.body.classList.remove('night-mode');
        document.body.classList.add('light-mode');
        updateThemeIcon();
      } else if (selectedTheme === 'dark') {
        document.body.classList.remove('light-mode');
        document.body.classList.add('night-mode');
        updateThemeIcon();
      } else if (selectedTheme === 'auto') {
        setThemeBasedOnSunriseSunset();
      }
      
      // メニューを閉じる
      if (themeDropdown) {
        themeDropdown.classList.add('hidden');
      }
    });
  });
  
  // 初回読み込み時の処理
  window.addEventListener('load', () => {
    // 現在時刻の定期的な更新
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);
    
    // テーマ設定
    setThemeBasedOnSunriseSunset();
    
    // 初回アイコン更新
    setTimeout(updateThemeIcon, 100);
  });
  
  // 定期的にテーマを確認・変更（30分ごと）
  setInterval(setThemeBasedOnSunriseSunset, 30 * 60 * 1000);
</script>